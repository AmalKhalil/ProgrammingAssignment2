## Put comments here that give an overall description of what your
## functions do
## make a cached matrix which cach its inverse.
## X must be invertavle
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data);
x$setinverse(i)
i
}
x <- matrix(nrow=2, ncol=2)
x
x[1,] <- c(4,3)
x
x[2,] <- c(3,2)
x
x <- makeCacheMatrix(x)
x
debug(cacheSolve)
cacheSolve(x)
## Put comments here that give an overall description of what your
## functions do
## make a cached matrix which cach its inverse.
## X must be invertavle
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data, ...);
x$setinverse(i)
i
}
x
x <- makeCacheMatrix(x)
debug(cacheSolve)
cacheSolve(x)
ma <- matrix(c[4,3,3,2], nrow = 2, ncol = 2)
ma <- matrix( nrow = 2, ncol = 2)
ma[1,] = c(3,4)
ma[1,] = c(3,2)
m
ma
ma[1,] = c(4,3)
ma[2,] = c(3, 2)
ma
x <- makeCacheMatrix(ma)
solve(ma)
ma
x
debug(cacheSolve)
cacheSolve(x)
debug(cacheSolve)
cacheSolve(x)
ma
ma[1,] = c(6,7)
ma
x$set(ma)
debug(cacheSolve)
cacheSolve(x)
debug(cacheSolve)
cacheSolve(x)
